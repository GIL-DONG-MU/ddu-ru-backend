name: CI - Continuous Integration

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'  # 문서 변경은 제외

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🧪 Run tests
      run: ./gradlew test
      
    - name: 📊 Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: build/test-results/test/**/*.xml
        
    - name: 📋 Comment test results on PR
      uses: mikepenz/action-junit-report@v4
      if: success() || failure()
      with:
        report_paths: 'build/test-results/test/**/*.xml'
        token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: 🏗️ Build Application  
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🏗️ Build with Gradle
      run: ./gradlew build -x test

    - name: 🐳 Build Docker image (validation)
      run: docker build -t ddu-ru-backend:ci-test .
      
    - name: ✅ CI Success
      run: echo "✅ All CI checks passed! Ready for merge."